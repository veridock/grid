<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1000 700">

    <title>Project Manager PWA</title>
    <desc>Professional project management application with team collaboration and backend integration</desc>

    <!-- JSON Application Configuration -->
    <script type="application/json" id="app-metadata"><![CDATA[
  {
    "application": {
      "name": "Project Manager PWA",
      "version": "4.1.2",
      "type": "project_management",
      "category": "productivity",
      "license": "Enterprise",
      "author": "VeriDock Grid Solutions"
    },
    "features": {
      "project_tracking": true,
      "task_management": ["create", "assign", "track", "complete"],
      "team_collaboration": ["comments", "file_sharing", "notifications"],
      "reporting": ["progress", "timeline", "resource_utilization"],
      "integrations": ["calendar", "email", "slack", "github"],
      "offline_support": true
    },
    "backend_services": {
      "api_base": "/api/projects/",
      "authentication": "jwt_token",
      "database": "postgresql",
      "cache": "redis",
      "file_storage": "s3_compatible",
      "real_time": "websockets"
    },
    "user_management": {
      "roles": ["admin", "project_manager", "team_member", "viewer"],
      "permissions": ["create", "read", "update", "delete", "assign"],
      "multi_tenant": true
    },
    "analytics": {
      "tracking": ["user_activity", "project_progress", "team_productivity"],
      "dashboards": ["executive", "manager", "individual"],
      "exports": ["pdf", "excel", "json", "csv"]
    }
  }
  ]]></script>

    <!-- Backend Implementation Logic -->
    <script type="application/json" id="backend-logic"><![CDATA[
  {
    "server_implementation": {
      "project_api_class": "class ProjectAPI extends BaseController { private $db; private $auth; public function __construct() { $this->db = new Database(); $this->auth = new AuthService(); } public function createProject($data) { $userId = $this->auth->getCurrentUserId(); $project = [ 'name' => $data['name'], 'description' => $data['description'], 'owner_id' => $userId, 'status' => 'active', 'created_at' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s') ]; $projectId = $this->db->insert('projects', $project); return $this->getProject($projectId); } public function getProjects($filters = []) { $sql = 'SELECT p.*, u.name as owner_name FROM projects p JOIN users u ON p.owner_id = u.id WHERE 1=1'; $params = []; if (isset($filters['status'])) { $sql .= ' AND p.status = ?'; $params[] = $filters['status']; } if (isset($filters['owner_id'])) { $sql .= ' AND p.owner_id = ?'; $params[] = $filters['owner_id']; } $sql .= ' ORDER BY p.updated_at DESC'; return $this->db->query($sql, $params); } public function updateProject($id, $data) { $updates = []; $params = []; foreach (['name', 'description', 'status'] as $field) { if (isset($data[$field])) { $updates[] = $field . ' = ?'; $params[] = $data[$field]; } } if (!empty($updates)) { $params[] = $id; $sql = 'UPDATE projects SET ' . implode(', ', $updates) . ', updated_at = NOW() WHERE id = ?'; $this->db->execute($sql, $params); } return $this->getProject($id); } public function deleteProject($id) { $this->db->execute('DELETE FROM project_tasks WHERE project_id = ?', [$id]); $this->db->execute('DELETE FROM projects WHERE id = ?', [$id]); return ['success' => true]; } }",
      "task_management": "class TaskManager { private $db; public function createTask($projectId, $data) { $task = [ 'project_id' => $projectId, 'title' => $data['title'], 'description' => $data['description'] ?? '', 'assigned_to' => $data['assigned_to'] ?? null, 'priority' => $data['priority'] ?? 'medium', 'status' => 'todo', 'due_date' => $data['due_date'] ?? null, 'created_at' => date('Y-m-d H:i:s') ]; return $this->db->insert('project_tasks', $task); } public function getTasks($projectId) { return $this->db->query('SELECT t.*, u.name as assignee_name FROM project_tasks t LEFT JOIN users u ON t.assigned_to = u.id WHERE t.project_id = ? ORDER BY t.priority DESC, t.created_at', [$projectId]); } public function updateTaskStatus($taskId, $status) { $this->db->execute('UPDATE project_tasks SET status = ?, updated_at = NOW() WHERE id = ?', [$status, $taskId]); return ['success' => true]; } }",
      "api_endpoints": "Route::group(['prefix' => 'api/projects', 'middleware' => 'auth'], function() { Route::get('/', 'ProjectController@index'); Route::post('/', 'ProjectController@store'); Route::get('/{id}', 'ProjectController@show'); Route::put('/{id}', 'ProjectController@update'); Route::delete('/{id}', 'ProjectController@destroy'); Route::get('/{id}/tasks', 'TaskController@index'); Route::post('/{id}/tasks', 'TaskController@store'); Route::put('/tasks/{taskId}', 'TaskController@update'); Route::delete('/tasks/{taskId}', 'TaskController@destroy'); });"
    }
  }
  ]]></script>

    <defs>
        <style><![CDATA[
      .app-base { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif; }
      .main-title { fill: white; font-size: 30px; font-weight: 800; text-anchor: middle; }
      .section-title { fill: #81c784; font-size: 18px; font-weight: 600; }
      .card { fill: rgba(255,255,255,0.12); stroke: #4caf50; stroke-width: 1.5; rx: 12; }
      .project-card { fill: rgba(76,175,80,0.15); stroke: #66bb6a; stroke-width: 2; rx: 10; }
      .task-card { fill: rgba(33,150,243,0.12); stroke: #42a5f5; stroke-width: 1; rx: 8; }
      .project-name { fill: white; font-size: 16px; font-weight: 600; }
      .project-desc { fill: #e8f5e8; font-size: 12px; }
      .task-text { fill: white; font-size: 13px; }
      .priority-high { fill: #f44336; }
      .priority-medium { fill: #ff9800; }
      .priority-low { fill: #4caf50; }
      .status-todo { fill: #9e9e9e; }
      .status-progress { fill: #2196f3; }
      .status-done { fill: #4caf50; }
      .btn-primary { fill: #4caf50; stroke: none; rx: 6; cursor: pointer; }
      .btn-secondary { fill: #2196f3; stroke: none; rx: 6; cursor: pointer; }
      .btn-danger { fill: #f44336; stroke: none; rx: 6; cursor: pointer; }
      .btn-text { fill: white; font-size: 12px; text-anchor: middle; font-weight: 500; }
      .metric-label { fill: #b0bec5; font-size: 11px; }
      .metric-value { fill: white; font-size: 18px; font-weight: bold; }
      .user-avatar { fill: #64b5f6; stroke: white; stroke-width: 2; }
    ]]></style>

        <linearGradient id="appGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#1a237e;stop-opacity:1"/>
            <stop offset="50%" style="stop-color:#283593;stop-opacity:1"/>
            <stop offset="100%" style="stop-color:#3949ab;stop-opacity:1"/>
        </linearGradient>
    </defs>

    <!-- Main Background -->
    <rect width="100%" height="100%" fill="url(#appGradient)"/>

    <!-- Header -->
    <text x="500" y="45" class="main-title">ðŸš€ Project Manager PWA</text>
    <text x="500" y="70" class="project-desc" style="text-anchor:middle;">Team Collaboration â€¢ Backend Integration â€¢
        Real-time Updates
    </text>

    <!-- Dashboard Metrics -->
    <rect x="50" y="90" width="180" height="80" class="card"/>
    <text x="70" y="110" class="metric-label">Active Projects</text>
    <text x="70" y="135" class="metric-value" id="active-projects">3</text>
    <text x="70" y="155" class="metric-label">85% Complete</text>

    <rect x="250" y="90" width="180" height="80" class="card"/>
    <text x="270" y="110" class="metric-label">Total Tasks</text>
    <text x="270" y="135" class="metric-value" id="total-tasks">24</text>
    <text x="270" y="155" class="metric-label">18 Completed</text>

    <rect x="450" y="90" width="180" height="80" class="card"/>
    <text x="470" y="110" class="metric-label">Team Members</text>
    <text x="470" y="135" class="metric-value" id="team-count">7</text>
    <text x="470" y="155" class="metric-label">Online: 5</text>

    <rect x="650" y="90" width="180" height="80" class="card"/>
    <text x="670" y="110" class="metric-label">This Week</text>
    <text x="670" y="135" class="metric-value" id="week-progress">12</text>
    <text x="670" y="155" class="metric-label">Tasks Done</text>

    <!-- Action Buttons -->
    <rect x="850" y="95" width="90" height="25" class="btn-primary" onclick="createProject()"/>
    <text x="895" y="110" class="btn-text">New Project</text>

    <rect x="850" y="125" width="90" height="25" class="btn-secondary" onclick="exportData()"/>
    <text x="895" y="140" class="btn-text">Export Data</text>

    <rect x="850" y="155" width="90" height="25" class="btn-secondary" onclick="syncBackend()"/>
    <text x="895" y="170" class="btn-text">Sync Backend</text>

    <!-- Projects Section -->
    <text x="60" y="210" class="section-title">ðŸ“‹ Active Projects</text>

    <!-- Project Cards Container -->
    <rect x="50" y="220" width="900" height="200" class="card"/>
    <rect x="60" y="230" width="880" height="180" fill="none" id="projects-container"/>

    <!-- Tasks Section -->
    <text x="60" y="450" class="section-title">âœ… Recent Tasks</text>

    <!-- Tasks Container -->
    <rect x="50" y="460" width="900" height="180" class="card"/>
    <rect x="60" y="470" width="880" height="160" fill="none" id="tasks-container"/>

    <!-- Footer Status -->
    <text x="500" y="670" class="project-desc" style="text-anchor:middle;">Backend Connected â€¢ Real-time Sync â€¢ Last
        Update:
        <tspan id="last-update">Now</tspan>
    </text>

    <script><![CDATA[
    // Project Manager Application
    class ProjectManager {
        constructor() {
            this.projects = [];
            this.tasks = [];
            this.config = {};
            this.backendLogic = {};
            this.initializeApp();
        }
        
        initializeApp() {
            // Load configuration
            const configEl = document.getElementById('app-metadata');
            if (configEl) {
                this.config = JSON.parse(configEl.textContent);
                console.log('Project Manager Config:', this.config.application.name);
            }
            
            // Load backend logic
            const backendEl = document.getElementById('backend-logic');
            if (backendEl) {
                this.backendLogic = JSON.parse(backendEl.textContent);
                console.log('Backend Logic Available:', Object.keys(this.backendLogic.server_implementation));
            }
            
            // Initialize sample data
            this.loadSampleData();
            this.updateUI();
            this.startRealTimeUpdates();
        }
        
        loadSampleData() {
            // Sample projects
            this.projects = [
                {
                    id: 'proj_001',
                    name: 'E-commerce Platform',
                    description: 'Modern online shopping platform with React frontend',
                    status: 'active',
                    progress: 75,
                    owner: 'John Smith',
                    team_size: 5,
                    due_date: '2025-02-15',
                    created_at: '2024-12-01'
                },
                {
                    id: 'proj_002', 
                    name: 'Mobile Banking App',
                    description: 'Secure banking application for iOS and Android',
                    status: 'active',
                    progress: 45,
                    owner: 'Sarah Connor',
                    team_size: 3,
                    due_date: '2025-03-30',
                    created_at: '2024-11-15'
                },
                {
                    id: 'proj_003',
                    name: 'Data Analytics Dashboard',
                    description: 'Real-time analytics and reporting system',
                    status: 'planning',
                    progress: 15,
                    owner: 'Mike Johnson',
                    team_size: 4,
                    due_date: '2025-04-20',
                    created_at: '2025-01-10'
                }
            ];
            
            // Sample tasks
            this.tasks = [
                {id: 'task_001', project_id: 'proj_001', title: 'Implement user authentication', status: 'done', priority: 'high', assignee: 'Alice'},
                {id: 'task_002', project_id: 'proj_001', title: 'Design product catalog UI', status: 'progress', priority: 'medium', assignee: 'Bob'},
                {id: 'task_003', project_id: 'proj_002', title: 'Security audit review', status: 'todo', priority: 'high', assignee: 'Charlie'},
                {id: 'task_004', project_id: 'proj_002', title: 'Payment gateway integration', status: 'progress', priority: 'high', assignee: 'Diana'},
                {id: 'task_005', project_id: 'proj_003', title: 'Database schema design', status: 'done', priority: 'medium', assignee: 'Eve'}
            ];
        }
        
        updateUI() {
            this.updateMetrics();
            this.renderProjects();
            this.renderTasks();
            this.updateLastUpdateTime();
        }
        
        updateMetrics() {
            const activeProjects = this.projects.filter(p => p.status === 'active').length;
            const totalTasks = this.tasks.length;
            const completedTasks = this.tasks.filter(t => t.status === 'done').length;
            const teamMembers = [...new Set(this.tasks.map(t => t.assignee))].length;
            
            document.getElementById('active-projects').textContent = activeProjects;
            document.getElementById('total-tasks').textContent = totalTasks;
            document.getElementById('team-count').textContent = teamMembers;
            document.getElementById('week-progress').textContent = completedTasks;
        }
        
        renderProjects() {
            const container = document.getElementById('projects-container');
            this.clearContainer(container);
            
            this.projects.slice(0, 3).forEach((project, index) => {
                const y = index * 55;
                
                // Project card background
                const projectCard = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                projectCard.setAttribute('x', '10');
                projectCard.setAttribute('y', y + 5);
                projectCard.setAttribute('width', '860');
                projectCard.setAttribute('height', '45');
                projectCard.setAttribute('class', 'project-card');
                container.appendChild(projectCard);
                
                // Project name
                const nameText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                nameText.setAttribute('x', '25');
                nameText.setAttribute('y', y + 25);
                nameText.setAttribute('class', 'project-name');
                nameText.textContent = project.name;
                container.appendChild(nameText);
                
                // Description
                const descText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                descText.setAttribute('x', '25');
                descText.setAttribute('y', y + 40);
                descText.setAttribute('class', 'project-desc');
                descText.textContent = project.description;
                container.appendChild(descText);
                
                // Progress bar
                const progressBg = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                progressBg.setAttribute('x', '400');
                progressBg.setAttribute('y', y + 20);
                progressBg.setAttribute('width', '150');
                progressBg.setAttribute('height', '8');
                progressBg.setAttribute('fill', 'rgba(255,255,255,0.2)');
                progressBg.setAttribute('rx', '4');
                container.appendChild(progressBg);
                
                const progressFill = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                progressFill.setAttribute('x', '400');
                progressFill.setAttribute('y', y + 20);
                progressFill.setAttribute('width', (150 * project.progress / 100).toString());
                progressFill.setAttribute('height', '8');
                progressFill.setAttribute('fill', '#4caf50');
                progressFill.setAttribute('rx', '4');
                container.appendChild(progressFill);
                
                // Progress percentage
                const progressText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                progressText.setAttribute('x', '560');
                progressText.setAttribute('y', y + 27);
                progressText.setAttribute('class', 'project-desc');
                progressText.setAttribute('font-size', '11px');
                progressText.textContent = `${project.progress}%`;
                container.appendChild(progressText);
                
                // Owner
                const ownerText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                ownerText.setAttribute('x', '600');
                ownerText.setAttribute('y', y + 25);
                ownerText.setAttribute('class', 'project-desc');
                ownerText.setAttribute('font-size', '11px');
                ownerText.textContent = `Owner: ${project.owner}`;
                container.appendChild(ownerText);
                
                // Team size
                const teamText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                teamText.setAttribute('x', '600');
                teamText.setAttribute('y', y + 40);
                teamText.setAttribute('class', 'project-desc');
                teamText.setAttribute('font-size', '11px');
                teamText.textContent = `Team: ${project.team_size} members`;
                container.appendChild(teamText);
                
                // View button
                const viewBtn = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                viewBtn.setAttribute('x', '780');
                viewBtn.setAttribute('y', y + 15);
                viewBtn.setAttribute('width', '60');
                viewBtn.setAttribute('height', '20');
                viewBtn.setAttribute('class', 'btn-secondary');
                viewBtn.setAttribute('style', 'cursor: pointer');
                viewBtn.onclick = () => this.viewProject(project.id);
                container.appendChild(viewBtn);
                
                const viewBtnText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                viewBtnText.setAttribute('x', '810');
                viewBtnText.setAttribute('y', '27');
                viewBtnText.setAttribute('class', 'btn-text');
                viewBtnText.setAttribute('font-size', '10px');
                viewBtnText.textContent = 'View';
                container.appendChild(viewBtnText);
            });
        }
        
        renderTasks() {
            const container = document.getElementById('tasks-container');
            this.clearContainer(container);
            
            this.tasks.slice(0, 6).forEach((task, index) => {
                const y = index * 25;
                
                // Task card
                const taskCard = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                taskCard.setAttribute('x', '10');
                taskCard.setAttribute('y', y + 2);
                taskCard.setAttribute('width', '860');
                taskCard.setAttribute('height', '20');
                taskCard.setAttribute('class', 'task-card');
                container.appendChild(taskCard);
                
                // Priority indicator
                const priorityCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                priorityCircle.setAttribute('cx', '25');
                priorityCircle.setAttribute('cy', y + 12);
                priorityCircle.setAttribute('r', '4');
                priorityCircle.setAttribute('class', `priority-${task.priority}`);
                container.appendChild(priorityCircle);
                
                // Task title
                const titleText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                titleText.setAttribute('x', '40');
                titleText.setAttribute('y', y + 16);
                titleText.setAttribute('class', 'task-text');
                titleText.textContent = task.title;
                container.appendChild(titleText);
                
                // Status
                const statusText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                statusText.setAttribute('x', '450');
                statusText.setAttribute('y', y + 16);
                statusText.setAttribute('class', `status-${task.status}`);
                statusText.setAttribute('font-size', '11px');
                statusText.textContent = task.status.toUpperCase();
                container.appendChild(statusText);
                
                // Assignee
                const assigneeText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                assigneeText.setAttribute('x', '550');
                assigneeText.setAttribute('y', y + 16);
                assigneeText.setAttribute('class', 'project-desc');
                assigneeText.setAttribute('font-size', '11px');
                assigneeText.textContent = task.assignee;
                container.appendChild(assigneeText);
                
                // Complete button (if not done)
                if (task.status !== 'done') {
                    const completeBtn = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                    completeBtn.setAttribute('x', '650');
                    completeBtn.setAttribute('y', y + 5);
                    completeBtn.setAttribute('width', '60');
                    completeBtn.setAttribute('height', '14');
                    completeBtn.setAttribute('class', 'btn-primary');
                    completeBtn.setAttribute('style', 'cursor: pointer');
                    completeBtn.onclick = () => this.completeTask(task.id);
                    container.appendChild(completeBtn);
                    
                    const completeBtnText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                    completeBtnText.setAttribute('x', '680');
                    completeBtnText.setAttribute('y', y + 14);
                    completeBtnText.setAttribute('class', 'btn-text');
                    completeBtnText.setAttribute('font-size', '9px');
                    completeBtnText.textContent = 'Complete';
                    container.appendChild(completeBtnText);
                }
            });
        }
        
        clearContainer(container) {
            while (container.children.length > 0) {
                container.removeChild(container.lastChild);
            }
        }
        
        createNewProject() {
            const newProject = {
                id: 'proj_' + Date.now(),
                name: 'New Project ' + (this.projects.length + 1),
                description: 'Project created from PWA interface',
                status: 'planning',
                progress: 0,
                owner: 'Current User',
                team_size: 1,
                due_date: new Date(Date.now() + 30*24*60*60*1000).toISOString().split('T')[0],
                created_at: new Date().toISOString().split('T')[0]
            };
            
            this.projects.unshift(newProject);
            this.updateUI();
            console.log('New project created:', newProject);
        }
        
        viewProject(projectId) {
            const project = this.projects.find(p => p.id === projectId);
            if (project) {
                console.log('Viewing project:', project);
                alert(`Viewing: ${project.name}\nStatus: ${project.status}\nProgress: ${project.progress}%`);
            }
        }
        
        completeTask(taskId) {
            const task = this.tasks.find(t => t.id === taskId);
            if (task) {
                task.status = 'done';
                this.updateUI();
                console.log('Task completed:', task);
            }
        }
        
        exportProjectData() {
            const exportData = {
                app_info: this.config.application,
                projects: this.projects,
                tasks: this.tasks,
                statistics: {
                    active_projects: this.projects.filter(p => p.status === 'active').length,
                    completed_tasks: this.tasks.filter(t => t.status === 'done').length,
                    team_members: [...new Set(this.tasks.map(t => t.assignee))].length
                },
                exported_at: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'project-manager-export.json';
            a.click();
            URL.revokeObjectURL(url);
            
            console.log('Project data exported');
        }
        
        syncWithBackend() {
            console.log('Syncing with backend API...');
            console.log('Backend services:', this.config.backend_services);
            console.log('API implementation available:', this.backendLogic.server_implementation ? 'Yes' : 'No');
            
            // Simulate backend sync
            setTimeout(() => {
                this.updateLastUpdateTime();
                console.log('Backend sync completed successfully');
            }, 1500);
        }
        
        updateLastUpdateTime() {
            document.getElementById('last-update').textContent = new Date().toLocaleTimeString();
        }
        
        startRealTimeUpdates() {
            // Simulate real-time updates every 30 seconds
            setInterval(() => {
                if (document.visibilityState === 'visible') {
                    this.updateLastUpdateTime();
                }
            }, 30000);
        }
    }
    
    // Global functions for SVG onclick handlers
    let projectManager;
    
    function createProject() {
        projectManager.createNewProject();
    }
    
    function exportData() {
        projectManager.exportProjectData();
    }
    
    function syncBackend() {
        projectManager.syncWithBackend();
    }
    
    // Initialize application
    document.addEventListener('DOMContentLoaded', function() {
        projectManager = new ProjectManager();
    });
    
    // For SVG context
    projectManager = new ProjectManager();
    
  ]]></script>
</svg>
