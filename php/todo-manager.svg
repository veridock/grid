<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1000 700">

    <title>Todo Manager PWA</title>
    <desc>Advanced task management application with PHP backend integration, JavaScript interactivity, and JSON
        metadata
    </desc>

    <!-- JSON Metadata -->
    <script type="application/json" id="app-metadata"><![CDATA[
  {
    "name": "Todo Manager PWA",
    "version": "1.0.0",
    "description": "Full-featured task management application",
    "author": "VeriDock Grid",
    "type": "productivity",
    "features": [
      "Add/Remove tasks",
      "Mark as complete",
      "Priority levels",
      "Local storage persistence",
      "Export to JSON",
      "PHP API integration"
    ],
    "api": {
      "endpoints": {
        "getTasks": "/api/tasks",
        "addTask": "/api/tasks/add",
        "updateTask": "/api/tasks/update",
        "deleteTask": "/api/tasks/delete"
      },
      "methods": ["GET", "POST", "PUT", "DELETE"]
    },
    "storage": {
      "local": true,
      "sync": true,
      "capacity": "unlimited"
    }
  }
  ]]></script>

    <!-- PHP Backend Implementation -->
    <script type="application/json" id="backend-logic"><![CDATA[
  {
    "server_implementation": {
      "todo_controller": "class TodoAPI { private $dataFile = 'tasks.json'; public function getTasks() { if (file_exists($this->dataFile)) { return json_decode(file_get_contents($this->dataFile), true);
          }
          return [];
      }
      
      public function addTask($task) {
          $tasks = $this->getTasks();
          $task['id'] = uniqid();
          $task['created'] = date('Y-m-d H:i:s');
          $task['completed'] = false;
          $tasks[] = $task;
          return $this->saveTasks($tasks);
      }
      
      public function updateTask($taskId, $updates) {
          $tasks = $this->getTasks();
          foreach ($tasks as &$task) {
              if ($task['id'] === $taskId) {
                  $task = array_merge($task, $updates);
                  break;
              }
          }
          return $this->saveTasks($tasks);
      }
      
      public function deleteTask($taskId) {
          $tasks = $this->getTasks();
          $tasks = array_filter($tasks, function($task) use ($taskId) {
              return $task['id'] !== $taskId;
          });
          return $this->saveTasks(array_values($tasks));
      }
      
      private function saveTasks($tasks) {
          return file_put_contents($this->dataFile, json_encode($tasks, JSON_PRETTY_PRINT));
      }
  }
  
  // API endpoint handler
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
      $api = new TodoAPI();
      $action = $_POST['action'] ?? '';
      
      switch ($action) {
          case 'add':
              echo json_encode($api->addTask($_POST));
              break;
          case 'update':
              echo json_encode($api->updateTask($_POST['id'], $_POST));
              break;
          case 'delete':
              echo json_encode($api->deleteTask($_POST['id']));
              break;
          default:
              echo json_encode($api->getTasks());
      }
      exit;
  }
  ?>
  ]]></script>

    <defs>
        <style><![CDATA[
      .app-container { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
      .header { fill: white; font-size: 24px; font-weight: bold; text-anchor: middle; }
      .subheader { fill: #e0e0e0; font-size: 14px; text-anchor: middle; }
      .task-item { fill: rgba(255,255,255,0.1); stroke: #4caf50; stroke-width: 1; rx: 8; }
      .task-text { fill: white; font-size: 14px; }
      .task-completed { fill: #81c784; text-decoration: line-through; }
      .priority-high { stroke: #f44336; }
      .priority-medium { stroke: #ff9800; }
      .priority-low { stroke: #2196f3; }
      .btn { fill: #4caf50; stroke: none; rx: 20; cursor: pointer; }
      .btn:hover { fill: #45a049; }
      .btn-danger { fill: #f44336; }
      .btn-danger:hover { fill: #da190b; }
      .btn-text { fill: white; font-size: 12px; text-anchor: middle; font-weight: bold; }
      .input-field { fill: rgba(255,255,255,0.2); stroke: #4caf50; stroke-width: 2; rx: 5; }
      .stats-text { fill: #4caf50; font-size: 12px; font-weight: bold; }
    ]]></style>

        <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#1a237e;stop-opacity:1"/>
            <stop offset="50%" style="stop-color:#283593;stop-opacity:1"/>
            <stop offset="100%" style="stop-color:#3949ab;stop-opacity:1"/>
        </linearGradient>
    </defs>

    <!-- Background -->
    <rect width="100%" height="100%" fill="url(#bgGradient)"/>

    <!-- Header -->
    <text x="500" y="40" class="header">üìù Todo Manager PWA</text>
    <text x="500" y="60" class="subheader">Advanced Task Management with PHP + JavaScript + JSON</text>

    <!-- Stats Panel -->
    <rect x="50" y="80" width="900" height="60" fill="rgba(255,255,255,0.1)" stroke="#4caf50" stroke-width="1" rx="10"/>
    <text x="100" y="105" class="stats-text">Total:
        <tspan id="total-count">0</tspan>
    </text>
    <text x="250" y="105" class="stats-text">Completed:
        <tspan id="completed-count">0</tspan>
    </text>
    <text x="400" y="105" class="stats-text">Pending:
        <tspan id="pending-count">0</tspan>
    </text>
    <text x="550" y="105" class="stats-text">High Priority:
        <tspan id="high-priority-count">0</tspan>
    </text>

    <!-- Add Task Section -->
    <rect x="50" y="160" width="900" height="80" fill="rgba(255,255,255,0.1)" stroke="#4caf50" stroke-width="1"
          rx="10"/>
    <text x="70" y="180" class="task-text">Add New Task:</text>

    <!-- Input Fields (Standard SVG Elements) -->
    <rect x="70" y="190" width="400" height="30" fill="white" stroke="#4a9eff" stroke-width="1" rx="4"/>
    <text x="80" y="210" class="input-placeholder" font-family="Arial, sans-serif" font-size="12" fill="#888">Click to
        add new task...
    </text>

    <rect x="490" y="190" width="120" height="30" fill="white" stroke="#4a9eff" stroke-width="1" rx="4"/>
    <text x="500" y="210" class="priority-label" font-family="Arial, sans-serif" font-size="12" fill="#333">Priority:
        Medium
    </text>

    <!-- Priority Selection Buttons -->
    <g id="priority-buttons">
        <rect x="620" y="190" width="30" height="30" fill="#28a745" stroke="none" rx="4" class="priority-btn"
              data-priority="low" onclick="setPriority('low')"/>
        <text x="635" y="210" font-family="Arial, sans-serif" font-size="10" fill="white" text-anchor="middle">L</text>
        <rect x="655" y="190" width="30" height="30" fill="#ffc107" stroke="none" rx="4" class="priority-btn"
              data-priority="medium" onclick="setPriority('medium')"/>
        <text x="670" y="210" font-family="Arial, sans-serif" font-size="10" fill="white" text-anchor="middle">M</text>
        <rect x="690" y="190" width="30" height="30" fill="#dc3545" stroke="none" rx="4" class="priority-btn"
              data-priority="high" onclick="setPriority('high')"/>
        <text x="705" y="210" font-family="Arial, sans-serif" font-size="10" fill="white" text-anchor="middle">H</text>
    </g>

    <rect x="630" y="190" width="80" height="30" class="btn" onclick="addTask()"/>
    <text x="670" y="210" class="btn-text">Add Task</text>

    <rect x="730" y="190" width="100" height="30" class="btn" onclick="exportTasks()"/>
    <text x="780" y="210" class="btn-text">Export JSON</text>

    <rect x="850" y="190" width="80" height="30" class="btn" onclick="syncWithPHP()"/>
    <text x="890" y="210" class="btn-text">Sync PHP</text>

    <!-- Tasks Container -->
    <g id="tasks-container">
        <!-- Tasks will be dynamically added here -->
    </g>

    <!-- Footer -->
    <text x="500" y="680" class="subheader">Powered by VeriDock Grid ‚Ä¢ SVG PWA Technology</text>

    <script><![CDATA[
    // Todo Manager JavaScript Application
    class TodoManager {
        constructor() {
            this.tasks = [];
            this.loadTasks();
            this.updateStats();
            this.loadMetadata();
        }
        
        loadMetadata() {
            const metadata = document.getElementById('app-metadata');
            this.config = JSON.parse(metadata.textContent);
            console.log('App Config:', this.config);
        }
        
        addTask() {
            const input = document.getElementById('task-input');
            const priority = document.getElementById('priority-select');
            
            if (!input.value.trim()) {
                alert('Please enter a task description');
                return;
            }
            
            const task = {
                id: 'task_' + Date.now(),
                text: input.value.trim(),
                priority: priority.value,
                completed: false,
                created: new Date().toISOString(),
                updated: new Date().toISOString()
            };
            
            this.tasks.push(task);
            this.saveTasks();
            this.renderTasks();
            this.updateStats();
            
            input.value = '';
            console.log('Task added:', task);
        }
        
        toggleTask(taskId) {
            const task = this.tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = !task.completed;
                task.updated = new Date().toISOString();
                this.saveTasks();
                this.renderTasks();
                this.updateStats();
                console.log('Task toggled:', task);
            }
        }
        
        deleteTask(taskId) {
            if (confirm('Are you sure you want to delete this task?')) {
                this.tasks = this.tasks.filter(t => t.id !== taskId);
                this.saveTasks();
                this.renderTasks();
                this.updateStats();
                console.log('Task deleted:', taskId);
            }
        }
        
        renderTasks() {
            const container = document.getElementById('tasks-container');
            
            // Clear existing tasks
            while (container.children.length > 0) {
                container.removeChild(container.lastChild);
            }
            
            this.tasks.forEach((task, index) => {
                const y = index * 60;
                const priorityClass = `priority-${task.priority}`;
                
                // Task container
                const taskRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                taskRect.setAttribute('x', '0');
                taskRect.setAttribute('y', y);
                taskRect.setAttribute('width', '900');
                taskRect.setAttribute('height', '50');
                taskRect.setAttribute('class', `task-item ${priorityClass}`);
                taskRect.setAttribute('fill', task.completed ? 'rgba(129,199,132,0.2)' : 'rgba(255,255,255,0.1)');
                container.appendChild(taskRect);
                
                // Checkbox
                const checkbox = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                checkbox.setAttribute('x', '15');
                checkbox.setAttribute('y', y + 15);
                checkbox.setAttribute('width', '20');
                checkbox.setAttribute('height', '20');
                checkbox.setAttribute('fill', task.completed ? '#4caf50' : 'none');
                checkbox.setAttribute('stroke', '#4caf50');
                checkbox.setAttribute('stroke-width', '2');
                checkbox.setAttribute('rx', '3');
                checkbox.setAttribute('style', 'cursor: pointer');
                checkbox.onclick = () => this.toggleTask(task.id);
                container.appendChild(checkbox);
                
                if (task.completed) {
                    const checkmark = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                    checkmark.setAttribute('x', '25');
                    checkmark.setAttribute('y', y + 30);
                    checkmark.setAttribute('fill', 'white');
                    checkmark.setAttribute('font-size', '14');
                    checkmark.setAttribute('text-anchor', 'middle');
                    checkmark.textContent = '‚úì';
                    container.appendChild(checkmark);
                }
                
                // Task text
                const taskText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                taskText.setAttribute('x', '50');
                taskText.setAttribute('y', y + 30);
                taskText.setAttribute('class', `task-text ${task.completed ? 'task-completed' : ''}`);
                taskText.textContent = task.text;
                container.appendChild(taskText);
                
                // Priority indicator
                const priorityText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                priorityText.setAttribute('x', '600');
                priorityText.setAttribute('y', y + 30);
                priorityText.setAttribute('fill', task.priority === 'high' ? '#f44336' : task.priority === 'medium' ? '#ff9800' : '#2196f3');
                priorityText.setAttribute('font-size', '12');
                priorityText.textContent = task.priority.toUpperCase();
                container.appendChild(priorityText);
                
                // Created date
                const dateText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                dateText.setAttribute('x', '700');
                dateText.setAttribute('y', y + 30);
                dateText.setAttribute('fill', '#e0e0e0');
                dateText.setAttribute('font-size', '10');
                dateText.textContent = new Date(task.created).toLocaleDateString();
                container.appendChild(dateText);
                
                // Delete button
                const deleteBtn = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                deleteBtn.setAttribute('x', '820');
                deleteBtn.setAttribute('y', y + 10);
                deleteBtn.setAttribute('width', '60');
                deleteBtn.setAttribute('height', '30');
                deleteBtn.setAttribute('class', 'btn-danger');
                deleteBtn.setAttribute('rx', '15');
                deleteBtn.setAttribute('style', 'cursor: pointer');
                deleteBtn.onclick = () => this.deleteTask(task.id);
                container.appendChild(deleteBtn);
                
                const deleteBtnText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                deleteBtnText.setAttribute('x', '850');
                deleteBtnText.setAttribute('y', y + 30);
                deleteBtnText.setAttribute('class', 'btn-text');
                deleteBtnText.textContent = 'Delete';
                container.appendChild(deleteBtnText);
            });
        }
        
        updateStats() {
            const total = this.tasks.length;
            const completed = this.tasks.filter(t => t.completed).length;
            const pending = total - completed;
            const highPriority = this.tasks.filter(t => t.priority === 'high').length;
            
            document.getElementById('total-count').textContent = total;
            document.getElementById('completed-count').textContent = completed;
            document.getElementById('pending-count').textContent = pending;
            document.getElementById('high-priority-count').textContent = highPriority;
        }
        
        saveTasks() {
            localStorage.setItem('todo-tasks', JSON.stringify(this.tasks));
        }
        
        loadTasks() {
            const saved = localStorage.getItem('todo-tasks');
            if (saved) {
                this.tasks = JSON.parse(saved);
                this.renderTasks();
            }
        }
        
        exportTasks() {
            const dataStr = JSON.stringify(this.tasks, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'todo-tasks-export.json';
            link.click();
            URL.revokeObjectURL(url);
            console.log('Tasks exported to JSON');
        }
        
        async syncWithPHP() {
            try {
                // This would sync with the PHP backend in a real environment
                console.log('Syncing with PHP backend...');
                console.log('API Config:', this.config.api);
                
                // Simulate API call
                const response = await new Promise(resolve => {
                    setTimeout(() => {
                        resolve({
                            success: true,
                            message: 'Tasks synced successfully',
                            count: this.tasks.length
                        });
                    }, 1000);
                });
                
                alert(`PHP Sync: ${response.message} (${response.count} tasks)`);
                console.log('PHP sync completed:', response);
            } catch (error) {
                console.error('PHP sync failed:', error);
                alert('Failed to sync with PHP backend');
            }
        }
    }
    
    // Global functions for SVG onclick handlers
    let todoApp;
    
    function addTask() {
        todoApp.addTask();
    }
    
    function exportTasks() {
        todoApp.exportTasks();
    }
    
    function syncWithPHP() {
        todoApp.syncWithPHP();
    }
    
    // Initialize app when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
        todoApp = new TodoManager();
        console.log('Todo Manager PWA initialized');
    });
    
    // Initialize immediately for SVG context
    todoApp = new TodoManager();
    
  ]]></script>
</svg>
