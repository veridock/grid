<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1200 800">
  
  <title>{APP_TITLE}</title>
  <desc>{APP_DESC}</desc>
  
  <defs>
    <style><![CDATA[
      .header { font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; fill: white; }
      .card { fill: rgba(255,255,255,0.1); stroke: #64ffda; stroke-width: 1; rx: 10; }
      .text { font-family: Arial, sans-serif; font-size: 14px; fill: white; }
      .value { font-family: Arial, sans-serif; font-size: 18px; fill: #64ffda; font-weight: bold; }
      .button { fill: #64ffda; stroke: none; rx: 20; cursor: pointer; }
      .button:hover { fill: #00bcd4; }
      .button-text { font-family: Arial, sans-serif; font-size: 12px; fill: #1a1a2e; text-anchor: middle; }
      .status-active { fill: #4caf50; }
      .status-inactive { fill: #ff9800; }
      .chart-bar { fill: #64ffda; }
      .chart-text { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; }
    ]]></style>
    
    <linearGradient id="bgGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#1a1a2e;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#16213e;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#0f3460;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="100%" height="100%" fill="url(#bgGrad)"/>
  
  <!-- Header -->
  <text x="50" y="50" class="header">{DASHBOARD_TITLE}</text>
  <text x="50" y="80" class="text">Real-time monitoring and analytics</text>
  
  <!-- Cards Grid -->
  {CARDS_SECTION}
  
  <!-- Charts Section -->
  {CHARTS_SECTION}
  
  <!-- Action Buttons -->
  <rect x="50" y="650" width="120" height="40" class="button" onclick="refreshData()"/>
  <text x="110" y="675" class="button-text">Refresh</text>
  
  <rect x="180" y="650" width="120" height="40" class="button" onclick="exportData()"/>
  <text x="240" y="675" class="button-text">Export</text>
  
  <script><![CDATA[
    // Dashboard functionality
    let lastUpdate = new Date();
    
    function refreshData() {
      console.log('Refreshing dashboard data...');
      lastUpdate = new Date();
      
      // Update random values
      const values = document.querySelectorAll('.value');
      values.forEach(value => {
        if (value.textContent.includes('$')) {
          value.textContent = '$' + (Math.floor(Math.random() * 50000) + 10000).toLocaleString();
        } else if (value.textContent.includes('%')) {
          value.textContent = (Math.floor(Math.random() * 30) + 70) + '%';
        }
      });
    }
    
    function exportData() {
      const data = {
        timestamp: new Date().toISOString(),
        type: 'dashboard-export',
        values: Array.from(document.querySelectorAll('.value')).map(v => v.textContent)
      };
      
      console.log('Export data:', data);
      alert('Data exported successfully!');
    }
    
    // Auto-refresh every 30 seconds
    setInterval(refreshData, 30000);
    
    console.log('Dashboard PWA initialized');
  ]]></script>
</svg>
