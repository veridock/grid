<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 800 600">
  
  <title>{APP_TITLE}</title>
  <desc>{APP_DESC}</desc>
  
  <defs>
    <style><![CDATA[
      .chart-title { font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; fill: white; text-anchor: middle; }
      .axis-label { font-family: Arial, sans-serif; font-size: 12px; fill: #bdc3c7; }
      .axis-line { stroke: #34495e; stroke-width: 2; }
      .bar { fill: #3498db; cursor: pointer; }
      .bar:hover { fill: #2980b9; }
      .bar-label { font-family: Arial, sans-serif; font-size: 10px; fill: white; text-anchor: middle; }
      .legend { font-family: Arial, sans-serif; font-size: 12px; fill: white; }
      .grid-line { stroke: #2c3e50; stroke-width: 1; stroke-dasharray: 2,2; }
      .tooltip { fill: rgba(0,0,0,0.8); stroke: #3498db; stroke-width: 1; rx: 5; }
      .tooltip-text { font-family: Arial, sans-serif; font-size: 12px; fill: white; }
    ]]></style>
    
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2c3e50;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#34495e;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="barGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#3498db;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2980b9;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="100%" height="100%" fill="url(#bgGradient)"/>
  
  <!-- Title -->
  <text x="400" y="40" class="chart-title">{CHART_TITLE}</text>
  
  <!-- Chart Area -->
  <rect x="80" y="80" width="640" height="400" fill="rgba(255,255,255,0.05)" stroke="#34495e" stroke-width="1"/>
  
  <!-- Grid Lines -->
  <line x1="80" y1="480" x2="720" y2="480" class="axis-line"/>
  <line x1="80" y1="80" x2="80" y2="480" class="axis-line"/>
  
  <!-- Y-axis grid -->
  <line x1="80" y1="400" x2="720" y2="400" class="grid-line"/>
  <line x1="80" y1="320" x2="720" y2="320" class="grid-line"/>
  <line x1="80" y1="240" x2="720" y2="240" class="grid-line"/>
  <line x1="80" y1="160" x2="720" y2="160" class="grid-line"/>
  
  <!-- Y-axis labels -->
  <text x="70" y="485" class="axis-label">0</text>
  <text x="70" y="405" class="axis-label">25</text>
  <text x="70" y="325" class="axis-label">50</text>
  <text x="70" y="245" class="axis-label">75</text>
  <text x="70" y="165" class="axis-label">100</text>
  <text x="70" y="85" class="axis-label">125</text>
  
  <!-- Data Bars -->
  {DATA_BARS}
  
  <!-- X-axis labels -->
  {X_LABELS}
  
  <!-- Legend -->
  <rect x="550" y="520" width="15" height="15" fill="url(#barGradient)"/>
  <text x="575" y="532" class="legend">Data Values</text>
  
  <!-- Controls -->
  <rect x="50" y="520" width="80" height="30" fill="#27ae60" rx="15" cursor="pointer" onclick="updateData()"/>
  <text x="90" y="540" class="legend" text-anchor="middle">Update</text>
  
  <rect x="140" y="520" width="80" height="30" fill="#e74c3c" rx="15" cursor="pointer" onclick="resetData()"/>
  <text x="180" y="540" class="legend" text-anchor="middle">Reset</text>
  
  <!-- Tooltip (hidden by default) -->
  <rect id="tooltip" x="0" y="0" width="100" height="40" class="tooltip" style="display:none"/>
  <text id="tooltip-text" x="50" y="25" class="tooltip-text" text-anchor="middle"></text>
  
  <script><![CDATA[
    // Sample data
    let data = [
      {label: 'Jan', value: 85},
      {label: 'Feb', value: 92},
      {label: 'Mar', value: 78},
      {label: 'Apr', value: 105},
      {label: 'May', value: 120},
      {label: 'Jun', value: 95}
    ];
    
    const chartWidth = 640;
    const chartHeight = 400;
    const barWidth = 80;
    const barSpacing = 20;
    
    function drawChart() {
      // Clear existing bars and labels
      const bars = document.querySelectorAll('.dynamic-bar');
      const labels = document.querySelectorAll('.dynamic-label');
      bars.forEach(bar => bar.remove());
      labels.forEach(label => label.remove());
      
      // Find max value for scaling
      const maxValue = Math.max(...data.map(d => d.value));
      const scale = chartHeight / (maxValue * 1.2);
      
      data.forEach((item, index) => {
        const x = 100 + index * (barWidth + barSpacing);
        const barHeight = item.value * scale;
        const y = 480 - barHeight;
        
        // Create bar
        const bar = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        bar.setAttribute('class', 'bar dynamic-bar');
        bar.setAttribute('x', x);
        bar.setAttribute('y', y);
        bar.setAttribute('width', barWidth);
        bar.setAttribute('height', barHeight);
        bar.setAttribute('fill', 'url(#barGradient)');
        bar.setAttribute('onmouseover', `showTooltip(evt, '${item.label}: ${item.value}')`);
        bar.setAttribute('onmouseout', 'hideTooltip()');
        document.documentElement.appendChild(bar);
        
        // Create x-axis label
        const label = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        label.setAttribute('class', 'axis-label dynamic-label');
        label.setAttribute('x', x + barWidth/2);
        label.setAttribute('y', 500);
        label.setAttribute('text-anchor', 'middle');
        label.textContent = item.label;
        document.documentElement.appendChild(label);
        
        // Create value label on bar
        const valueLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        valueLabel.setAttribute('class', 'bar-label dynamic-label');
        valueLabel.setAttribute('x', x + barWidth/2);
        valueLabel.setAttribute('y', y - 5);
        valueLabel.setAttribute('text-anchor', 'middle');
        valueLabel.textContent = item.value;
        document.documentElement.appendChild(valueLabel);
      });
    }
    
    function showTooltip(evt, text) {
      const tooltip = document.getElementById('tooltip');
      const tooltipText = document.getElementById('tooltip-text');
      
      tooltip.setAttribute('x', evt.clientX - 50);
      tooltip.setAttribute('y', evt.clientY - 50);
      tooltip.style.display = 'block';
      tooltipText.setAttribute('x', evt.clientX);
      tooltipText.setAttribute('y', evt.clientY - 25);
      tooltipText.textContent = text;
    }
    
    function hideTooltip() {
      document.getElementById('tooltip').style.display = 'none';
    }
    
    function updateData() {
      data = data.map(item => ({
        ...item,
        value: Math.floor(Math.random() * 120) + 10
      }));
      drawChart();
      console.log('Data updated:', data);
    }
    
    function resetData() {
      data = [
        {label: 'Jan', value: 85},
        {label: 'Feb', value: 92},
        {label: 'Mar', value: 78},
        {label: 'Apr', value: 105},
        {label: 'May', value: 120},
        {label: 'Jun', value: 95}
      ];
      drawChart();
      console.log('Data reset to original values');
    }
    
    // Initialize chart
    drawChart();
    console.log('Data Visualization PWA initialized');
  ]]></script>
</svg>
